// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RankingCategory {
  ATP_SINGLES
  ATP_DOUBLES
  ATP_RACE_TO_TURIN
  ATP_NEXT_GEN_RACE
  ATP_DOUBLES_RACE
  WTA_SINGLES
  WTA_DOUBLES
}

model Player {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ranking     Int
  raceRanking Int
  racePoints  Int
  progression Int?
  points      Int
  rankedAt    String
  age         Int
  country     String
  // playerRankingHistory PlayerRankingHistory[]
}

model Player2 {
  id        String   @id @default(uuid()) // Identifiant unique
  name      String
  country   String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  rankings Ranking[]
}

model Ranking {
  id       String  @id @default(uuid()) // ID unique
  playerId String  @unique // Lien vers le joueur
  player   Player2 @relation(fields: [playerId], references: [id])

  ranking  Int // Position dans le classement
  points   Int // Nombre de points du joueur
  category RankingCategory // Type de classement (ATP/WTA, singles/doubles...)
  date     DateTime // Date du classement

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// model PlayerRankingHistory {
//   id        String          @id @default(cuid())
//   playerId  String
//   ranking   Int
//   points    Int
//   updatedAt DateTime        @updatedAt
//   category  RankingCategory

//   player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
// }

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
